/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package final_pbo;

import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Bambang Sumadi
 */
public class pinjamSkripsi extends javax.swing.JFrame {

    /**
     * Creates new form pinjamSkripsi
     */
    public pinjamSkripsi() {
        initComponents();
        Tampilan();
    }

    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }
    ArrayList<PeminjamanSkripsi> PeminjamanSkripsi;

    private void kosongkan_form() {
        isiID.setEditable(true);
        isiID.setText(null);
        isiNama.setText(null);
        isiAngkatan.setText(null);
        isiIDSkripsi.setText(null);
        isiJudul.setText(null);
        isiTgl.setText(null);
    }

    private void updateTable() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("final_pboPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<PeminjamanSkripsi> querySelectAll = entityManager.createNamedQuery("PeminjamanSkripsi.findAll", PeminjamanSkripsi.class);
        List<PeminjamanSkripsi> results = querySelectAll.getResultList();
        // ... (kode untuk mendapatkan data dari database)
        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("ID");
        newModel.addColumn("Name");
        newModel.addColumn("Gen");
        newModel.addColumn("ID Skripsi");
        newModel.addColumn("Title");
        newModel.addColumn("NoB");
        newModel.addColumn("Date");
        newModel.addColumn("Status");

        for (PeminjamanSkripsi data : PeminjamanSkripsi) {
            Object[] rowData = {
                data.getId(),
                data.getNama(),
                data.getAngkatan(),
                data.getIdSkripsi(),
                data.getJudulSkripsi(),
                data.getTanggal(),
                data.getJumlah(),
                data.getStatus()};
            newModel.addRow(rowData);
        }
    }

    private void Tampilan() {
//        Skripsi.clear();
        EntityManager entityManager = Persistence.createEntityManagerFactory("final_pboPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<PeminjamanSkripsi> querySelectAll = entityManager.createNamedQuery("PeminjamanSkripsi.findAll", PeminjamanSkripsi.class);
        Query query = entityManager.createQuery("SELECT p FROM PeminjamanSkripsi p");
        List<PeminjamanSkripsi> results = query.getResultList();
        entityManager.getTransaction().commit();
        entityManager.close();

        DefaultTableModel model = (DefaultTableModel) DefaultTableModel.getModel();
        model.setRowCount(0);
        for (PeminjamanSkripsi data : results) {
            Object[] baris = new Object[8];
            baris[0] = data.getId();
            baris[1] = data.getNama();
            baris[2] = data.getAngkatan();
            baris[3] = data.getIdSkripsi();
            baris[4] = data.getJudulSkripsi();
            baris[5] = data.getTanggal();
            baris[6] = data.getJumlah();
            baris[7] = data.getStatus();
            model.addRow(baris);
        }
        DefaultTableModel.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        panelKiri = new javax.swing.JPanel();
        jHome = new javax.swing.JButton();
        jBuku = new javax.swing.JButton();
        jSkripsi = new javax.swing.JButton();
        jSearch = new javax.swing.JButton();
        jKeluar = new javax.swing.JButton();
        panelAtas = new javax.swing.JPanel();
        panelTengah = new javax.swing.JPanel();
        panelPinjamSkripsi = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        isiID = new javax.swing.JTextField();
        isiNama = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        isiAngkatan = new javax.swing.JTextField();
        isiIDSkripsi = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        isiJudul = new javax.swing.JTextField();
        isiJumlah = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        search = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        isiTgl = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cStatus = new javax.swing.JComboBox<>();
        simpan = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jSearch1 = new javax.swing.JTextField();
        cSearch = new javax.swing.JComboBox<>();
        print = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DefaultTableModel = new javax.swing.JTable();
        theMost = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.CardLayout());

        mainPanel.setBackground(new java.awt.Color(248, 243, 230));
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 520));

        panelKiri.setBackground(new java.awt.Color(248, 243, 230));

        jHome.setBackground(new java.awt.Color(248, 243, 230));
        jHome.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\primary (1).png")); // NOI18N
        jHome.setBorder(null);
        jHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHomeActionPerformed(evt);
            }
        });

        jBuku.setBackground(new java.awt.Color(248, 243, 230));
        jBuku.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Vector.png")); // NOI18N
        jBuku.setBorder(null);
        jBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBukuActionPerformed(evt);
            }
        });

        jSkripsi.setBackground(new java.awt.Color(248, 243, 230));
        jSkripsi.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Vector (1).png")); // NOI18N
        jSkripsi.setBorder(null);
        jSkripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSkripsiActionPerformed(evt);
            }
        });

        jSearch.setBackground(new java.awt.Color(248, 243, 230));
        jSearch.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Vector (3).png")); // NOI18N
        jSearch.setBorder(null);
        jSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchActionPerformed(evt);
            }
        });

        jKeluar.setBackground(new java.awt.Color(248, 243, 230));
        jKeluar.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Vector (2).png")); // NOI18N
        jKeluar.setBorder(null);

        javax.swing.GroupLayout panelKiriLayout = new javax.swing.GroupLayout(panelKiri);
        panelKiri.setLayout(panelKiriLayout);
        panelKiriLayout.setHorizontalGroup(
            panelKiriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKiriLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(panelKiriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSkripsi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBuku, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jHome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jKeluar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelKiriLayout.setVerticalGroup(
            panelKiriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKiriLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jHome, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSkripsi, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jKeluar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        panelAtas.setBackground(new java.awt.Color(41, 134, 204));

        javax.swing.GroupLayout panelAtasLayout = new javax.swing.GroupLayout(panelAtas);
        panelAtas.setLayout(panelAtasLayout);
        panelAtasLayout.setHorizontalGroup(
            panelAtasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelAtasLayout.setVerticalGroup(
            panelAtasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        panelTengah.setBackground(new java.awt.Color(150, 213, 242));
        panelTengah.setLayout(new java.awt.CardLayout());

        panelPinjamSkripsi.setBackground(new java.awt.Color(150, 213, 242));

        exit.setBackground(new java.awt.Color(150, 213, 242));
        exit.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Group 1876.png")); // NOI18N
        exit.setBorder(null);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Rounded", 1, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(5, 37, 132));
        jLabel6.setText("Peminjaman Skripsi");

        jLabel10.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 51));
        jLabel10.setText("ID");

        isiID.setBackground(new java.awt.Color(246, 246, 246));
        isiID.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiID.setForeground(new java.awt.Color(0, 51, 51));

        isiNama.setBackground(new java.awt.Color(246, 246, 246));
        isiNama.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiNama.setForeground(new java.awt.Color(0, 51, 51));

        jLabel11.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 51));
        jLabel11.setText("Name");

        jLabel12.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 51));
        jLabel12.setText("Gen");

        isiAngkatan.setBackground(new java.awt.Color(246, 246, 246));
        isiAngkatan.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiAngkatan.setForeground(new java.awt.Color(0, 51, 51));

        isiIDSkripsi.setBackground(new java.awt.Color(246, 246, 246));
        isiIDSkripsi.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiIDSkripsi.setForeground(new java.awt.Color(0, 51, 51));

        jLabel13.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 51, 51));
        jLabel13.setText("ID Skripsi");

        jLabel14.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 51, 51));
        jLabel14.setText("Title");

        isiJudul.setBackground(new java.awt.Color(246, 246, 246));
        isiJudul.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiJudul.setForeground(new java.awt.Color(0, 51, 51));

        isiJumlah.setBackground(new java.awt.Color(246, 246, 246));
        isiJumlah.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiJumlah.setForeground(new java.awt.Color(0, 51, 51));

        jLabel15.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 51, 51));
        jLabel15.setText("NoP");

        search.setBackground(new java.awt.Color(41, 134, 204));
        search.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        search.setForeground(new java.awt.Color(255, 255, 255));
        search.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Vector (5).png")); // NOI18N
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 51, 51));
        jLabel16.setText("Date");

        isiTgl.setBackground(new java.awt.Color(246, 246, 246));
        isiTgl.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        isiTgl.setForeground(new java.awt.Color(0, 51, 51));

        jLabel17.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 51, 51));
        jLabel17.setText("Status");

        cStatus.setBackground(new java.awt.Color(246, 246, 246));
        cStatus.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        cStatus.setForeground(new java.awt.Color(0, 51, 51));
        cStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Borrowed", "Returned" }));
        cStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cStatusActionPerformed(evt);
            }
        });

        simpan.setBackground(new java.awt.Color(41, 134, 204));
        simpan.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        simpan.setForeground(new java.awt.Color(255, 255, 255));
        simpan.setText("Save");
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });

        edit.setBackground(new java.awt.Color(41, 134, 204));
        edit.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        edit.setForeground(new java.awt.Color(255, 255, 255));
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        hapus.setBackground(new java.awt.Color(41, 134, 204));
        hapus.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        hapus.setForeground(new java.awt.Color(255, 255, 255));
        hapus.setText("Delete");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Helvetica Rounded", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 51, 51));
        jLabel19.setText("Search");

        jSearch1.setBackground(new java.awt.Color(246, 246, 246));
        jSearch1.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        jSearch1.setForeground(new java.awt.Color(0, 51, 51));
        jSearch1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSearch1KeyReleased(evt);
            }
        });

        cSearch.setBackground(new java.awt.Color(246, 246, 246));
        cSearch.setFont(new java.awt.Font("Helvetica Rounded", 1, 16)); // NOI18N
        cSearch.setForeground(new java.awt.Color(0, 51, 51));
        cSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Name", "Gen", "ISBN", "Title", "NoB", "Date", "Status", "Categories" }));

        print.setBackground(new java.awt.Color(41, 134, 204));
        print.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\Page-1.png")); // NOI18N
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        DefaultTableModel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Gen", "ID Skripsi", "Title", "Date", "NoP", "Status"
            }
        ));
        DefaultTableModel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DefaultTableModelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DefaultTableModel);

        theMost.setBackground(new java.awt.Color(41, 134, 204));
        theMost.setFont(new java.awt.Font("Helvetica", 1, 12)); // NOI18N
        theMost.setForeground(new java.awt.Color(255, 255, 255));
        theMost.setText("Print by The Most");
        theMost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theMostActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPinjamSkripsiLayout = new javax.swing.GroupLayout(panelPinjamSkripsi);
        panelPinjamSkripsi.setLayout(panelPinjamSkripsiLayout);
        panelPinjamSkripsiLayout.setHorizontalGroup(
            panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
            .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(exit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel12)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isiJudul, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isiJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                                        .addComponent(isiIDSkripsi)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(isiNama, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(isiAngkatan, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(isiID, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(48, 48, 48)
                                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel17))))
                        .addGap(18, 18, 18)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPinjamSkripsiLayout.createSequentialGroup()
                                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPinjamSkripsiLayout.createSequentialGroup()
                                        .addComponent(simpan)
                                        .addGap(18, 18, 18)
                                        .addComponent(edit))
                                    .addComponent(jSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                                        .addComponent(hapus)
                                        .addGap(233, 233, 233))
                                    .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                                        .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(theMost, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(isiTgl, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, 330, Short.MAX_VALUE))))
                    .addComponent(jLabel6))
                .addGap(28, 28, 28))
        );
        panelPinjamSkripsiLayout.setVerticalGroup(
            panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exit)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isiID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isiNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isiAngkatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(isiIDSkripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13))
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isiJudul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel19))
                        .addGap(5, 5, 5)
                        .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isiJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)))
                    .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                            .addComponent(isiTgl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel17))
                            .addGap(18, 18, 18)
                            .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(simpan, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelPinjamSkripsiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(print, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPinjamSkripsiLayout.createSequentialGroup()
                                    .addComponent(theMost, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(16, 16, 16))))
                        .addGroup(panelPinjamSkripsiLayout.createSequentialGroup()
                            .addGap(128, 128, 128)
                            .addComponent(jSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(5, 5, 5)
                            .addComponent(cSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelTengah.add(panelPinjamSkripsi, "card7");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(panelKiri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTengah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(panelAtas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(panelAtas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelKiri, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(panelTengah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jPanel1.add(mainPanel, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1290, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHomeActionPerformed
        new home().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jHomeActionPerformed

    private void jBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBukuActionPerformed
        new inputBuku().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jBukuActionPerformed

    private void jSkripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSkripsiActionPerformed
        new inputSkripsi().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jSkripsiActionPerformed

    private void jSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchActionPerformed
        new search().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jSearchActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        new home().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String idSkripsi = isiIDSkripsi.getText();
        String id = isiID.getText();
        String nama = isiNama.getText();
        String angkatan = isiAngkatan.getText();
        String judul = isiJudul.getText();
        String tanggal = isiTgl.getText();
        String jumlah = isiJumlah.getText();

        SimpleDateFormat tgl = new SimpleDateFormat("dd-MM-yyyy");
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("final_pboPU");
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();
        Skripsi s = em.find(Skripsi.class, idSkripsi);
        em.getTransaction().commit();
        em.close();

        isiID.setText(s.getId());
        isiNama.setText(s.getNama());
        isiAngkatan.setText(s.getAngkatan());
        isiIDSkripsi.setText(s.getIdSkripsi());
        isiJudul.setText(s.getJudulSkripsi());
        //isiTgl.setText(s.getTanggal().toString());
        isiJumlah.setText(s.getJumlahHalaman());
    }//GEN-LAST:event_searchActionPerformed

    private void cStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cStatusActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
        String id = isiID.getText();
        String nama = isiNama.getText();
        String angkatan = isiAngkatan.getText();
        String idSkripsi = isiIDSkripsi.getText();
        String judulSkripsi = isiJudul.getText();
        String jumlah = isiJumlah.getText();
        String tanggal = isiTgl.getText();
        String status = (String) cStatus.getSelectedItem();
        try {
            SimpleDateFormat tgl = new SimpleDateFormat("dd-MM-yyyy");
            EntityManager entityManager = Persistence.createEntityManagerFactory("final_pboPU").createEntityManager();
            entityManager.getTransaction().begin();
            PeminjamanSkripsi p = new PeminjamanSkripsi();
            p.setId(id);
            p.setNama(nama);
            p.setAngkatan(angkatan);
            p.setIdSkripsi(idSkripsi);
            p.setJudulSkripsi(judulSkripsi);
            p.setTanggal(tgl.parse(tanggal));
            p.setJumlah(jumlah);
            p.setStatus(status);
            entityManager.persist(p);
            entityManager.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Data saved successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Kosongkan form setelah simpan
            kosongkan_form();
            Tampilan();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Data failed to save" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        isiID.setText(null);
        isiNama.setText(null);
        isiAngkatan.setText(null);
        isiIDSkripsi.setText(null);
        isiJudul.setText(null);
        isiJumlah.setText(null);
        isiTgl.setText(null);
    }//GEN-LAST:event_simpanActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        String id = isiID.getText();
        String nama = isiNama.getText();
        String angkatan = isiAngkatan.getText();
        String idSkripsi = isiIDSkripsi.getText();
        String judulSkripsi = isiJudul.getText();
        String jumlah = isiJumlah.getText();
        String tanggal = isiTgl.getText();
        String status = (String) cStatus.getSelectedItem();
        try {
            SimpleDateFormat tgl = new SimpleDateFormat("dd-MM-yyyy");
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("final_pboPU");
            EntityManager em = emf.createEntityManager();
            PeminjamanSkripsi p = new PeminjamanSkripsi();
            p.setId(id);
            p.setNama(nama);
            p.setAngkatan(angkatan);
            p.setIdSkripsi(idSkripsi);
            p.setJudulSkripsi(judulSkripsi);
            p.setTanggal(tgl.parse(tanggal));
            p.setJumlah(jumlah);
            p.setStatus(status);
            em.getTransaction().begin();
            em.merge(p);
            em.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Data updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Perbarui tabel
            Tampilan();
            kosongkan_form();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Data failed to update" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        isiID.setText(null);
        isiNama.setText(null);
        isiAngkatan.setText(null);
        isiIDSkripsi.setText(null);
        isiJudul.setText(null);
        isiJumlah.setText(null);
        isiTgl.setText(null);
    }//GEN-LAST:event_editActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        String idSkripsi = isiIDSkripsi.getText();
        try {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("final_pboPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            PeminjamanSkripsi p = em.find(PeminjamanSkripsi.class, idSkripsi);
            em.remove(p);

            em.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Data deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Data failed to delete" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        isiIDSkripsi.setText("");
        kosongkan_form();
        Tampilan();
    }//GEN-LAST:event_hapusActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        try {
            String reportPath = "src/final_pbo/cetakPinjamSkripsi.jrxml";
            String selection = ((String) cSearch.getSelectedItem()).toLowerCase();
            String searchTerm = jSearch1.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT p FROM PeminjamanSkripsi p WHERE ";

            switch (selection.toLowerCase()) {
                case "id":
                    queryString += "LOWER(p.id) LIKE LOWER(:searchTerm)";
                    break;
                case "name":
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case "gen":
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case "id skripsi":
                    queryString += "LOWER(p.idSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "title":
                    queryString += "LOWER(p.judulSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "status":
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case "nop":
                    queryString += "LOWER(p.jumlahHalaman) LIKE LOWER(:searchTerm)";
                    break;
                case "date":
                    queryString += "LOWER(p.tanggal) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            EntityManagerFactory emf = Persistence.createEntityManagerFactory("final_pboPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<PeminjamanSkripsi> cq = cb.createQuery(PeminjamanSkripsi.class);
            Root<PeminjamanSkripsi> bok = cq.from(PeminjamanSkripsi.class);
            cq.select(bok);

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<PeminjamanSkripsi> q = em.createQuery(cq);
            List<PeminjamanSkripsi> list = q.getResultList();
            Query query = em.createQuery(queryString);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            SimpleDateFormat tgl = new SimpleDateFormat("dd-MM-yyyy");
            List<PeminjamanSkripsi> results = query.getResultList();
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("querySearch", searchTerm);
            parameter.put("searchBy", selection);
            List<Object[]> data = new ArrayList<>();
            for (PeminjamanSkripsi result : results) {
                Object[] rowData = {
                    result.getId(),
                    result.getNama(),
                    result.getAngkatan(),
                    result.getIdSkripsi(),
                    result.getJudulSkripsi(),
                    result.getTanggal(),
                    result.getJumlah(),
                    result.getStatus()};
                data.add(rowData);
            }
            em.getTransaction().commit();
            em.close();
            emf.close();

            // Membuat sumber data untuk JasperReports dari data hasil pencarian
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);

            // Memuat file desain laporan (*.jrxml)
            JasperReport jasperReport = JasperCompileManager.compileReport(reportPath);
            JasperPrint print = JasperFillManager.fillReport(jasperReport, null, dataSource);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(pinjamSkripsi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printActionPerformed

    private void DefaultTableModelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DefaultTableModelMouseClicked
        int baris = DefaultTableModel.rowAtPoint(evt.getPoint());
        String id = DefaultTableModel.getValueAt(baris, 0).toString();
        isiID.setText(id);

        String nama = DefaultTableModel.getValueAt(baris, 1).toString();
        isiNama.setText(nama);

        String angkatan = DefaultTableModel.getValueAt(baris, 2).toString();
        isiAngkatan.setText(angkatan);

        String idSkripsi = DefaultTableModel.getValueAt(baris, 3).toString();
        isiIDSkripsi.setText(idSkripsi);

        String judulSkripsi = DefaultTableModel.getValueAt(baris, 4).toString();
        isiJudul.setText(judulSkripsi);

        String jumlah = DefaultTableModel.getValueAt(baris, 6).toString();
        isiJumlah.setText(jumlah);

        String tanggal = DefaultTableModel.getValueAt(baris, 5).toString();
        isiTgl.setText(tanggal);

        String status = DefaultTableModel.getValueAt(baris, 7).toString();
        cStatus.setSelectedItem(status);
    }//GEN-LAST:event_DefaultTableModelMouseClicked

    private void jSearch1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSearch1KeyReleased
        try {
            String selection = (String) cSearch.getSelectedItem();
            String searchTerm = jSearch1.getText().trim().toLowerCase();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT p FROM PeminjamanSkripsi p WHERE ";

            switch (selection.toLowerCase()) {
                case "id":
                    queryString += "LOWER(p.id) LIKE LOWER(:searchTerm)";
                    break;
                case "name":
                    queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                    break;
                case "gen":
                    queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                    break;
                case "id skripsi":
                    queryString += "LOWER(p.idSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "title":
                    queryString += "LOWER(p.judulSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "status":
                    queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                    break;
                case "nop":
                    queryString += "LOWER(p.jumlahHalaman) LIKE LOWER(:searchTerm)";
                    break;
                case "date":
                    queryString += "LOWER(p.tanggal) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("final_pboPU");
            EntityManager em = emf.createEntityManager();

            TypedQuery<PeminjamanSkripsi> query = em.createQuery(queryString, PeminjamanSkripsi.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<PeminjamanSkripsi> results = query.getResultList();

            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("ID");
            dataModel.addColumn("Name");
            dataModel.addColumn("Gen");
            dataModel.addColumn("ID Skripsi");
            dataModel.addColumn("Title");
            dataModel.addColumn("Date");
            dataModel.addColumn("NoP");
            dataModel.addColumn("Status");
            // ... tambahkan kolom lain sesuai kebutuhan
            // Add rows to the model
            for (PeminjamanSkripsi result : results) {
                Object[] rowData = {
                    result.getId(),
                    result.getNama(),
                    result.getAngkatan(),
                    result.getIdSkripsi(),
                    result.getJudulSkripsi(),
                    result.getTanggal(),
                    result.getJumlah(),
                    result.getStatus()};
                dataModel.addRow(rowData);
            }
            // Set jTableBuku with the created model
            DefaultTableModel.setModel(dataModel);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jSearch1KeyReleased

    private void theMostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theMostActionPerformed
        try {
            String selection = ((String) cSearch.getSelectedItem()).toLowerCase();
            String searchTerm = jSearch1.getText().trim();
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("final_pboPU");
            EntityManager em = emf.createEntityManager();

            String queryString = "SELECT p FROM PeminjamanSkripsi p WHERE ";

            switch (cSearch.getSelectedIndex()) {
                case 0:
                queryString += "LOWER(p.id) LIKE LOWER(:searchTerm)";
                break;
                case 1:
                queryString += "LOWER(p.nama) LIKE LOWER(:searchTerm)";
                break;
                case 2:
                queryString += "LOWER(p.angkatan) LIKE LOWER(:searchTerm)";
                break;
                case 3:
                queryString += "LOWER(p.idSkripsi) LIKE LOWER(:searchTerm)";
                break;
                case 4:
                queryString += "LOWER(p.judulSkripsi) LIKE LOWER(:searchTerm)";
                break;
                case 5:
                queryString += "LOWER(p.jumlahHalaman) LIKE LOWER(:searchTerm)";
                break;
                case 6:
                queryString += "LOWER(p.tanggal) LIKE LOWER(:searchTerm)";
                break;
                case 7:
                queryString += "LOWER(p.status) LIKE LOWER(:searchTerm)";
                break;
                default:
                throw new IllegalArgumentException("No search criteria selected. Selected Criteria: " + selection);
            }

            TypedQuery<PeminjamanSkripsi> query = em.createQuery(queryString, PeminjamanSkripsi.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<PeminjamanSkripsi> results = query.getResultList();

            if (results.isEmpty()) {
                System.out.println("No results found for the given criteria.");
                return;
            }

            // Menghitung ISBN yang paling banyak dipinjam
            Map<String, Integer> idSkripsiCountMap = new HashMap<>();
            String mostFrequentIdSkripsi= "";
            int maxCount = 0;

            for (PeminjamanSkripsi peminjaman : results) {
                String idSkripsi = peminjaman.getIdSkripsi();
                int count = idSkripsiCountMap.getOrDefault(idSkripsi, 0) + 1;
                idSkripsiCountMap.put(idSkripsi, count);
                if (count > maxCount) {
                    maxCount = count;
                    mostFrequentIdSkripsi = idSkripsi;
                }
            }

            // Load the JasperReports design file
            InputStream inputStream = PeminjamanSkripsi.class.getResourceAsStream("cetakJumlahTerbanyakSkripsi.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            // Fill the report with data
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("mostFrequentIdSkripsi", mostFrequentIdSkripsi);
            parameter.put("maxCount", maxCount);
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);
            parameter.put("peminjamanDataSource", dataSource);

            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameter, dataSource);

            // Show the report
            JasperViewer viewer = new JasperViewer(jasperPrint, false);
            viewer.setVisible(true);

        } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_theMostActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pinjamSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pinjamSkripsi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DefaultTableModel;
    private javax.swing.JComboBox<String> cSearch;
    private javax.swing.JComboBox<String> cStatus;
    private javax.swing.JButton edit;
    private javax.swing.JButton exit;
    private javax.swing.JButton hapus;
    private javax.swing.JTextField isiAngkatan;
    private javax.swing.JTextField isiID;
    private javax.swing.JTextField isiIDSkripsi;
    private javax.swing.JTextField isiJudul;
    private javax.swing.JTextField isiJumlah;
    private javax.swing.JTextField isiNama;
    private javax.swing.JTextField isiTgl;
    private javax.swing.JButton jBuku;
    private javax.swing.JButton jHome;
    private javax.swing.JButton jKeluar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSearch;
    private javax.swing.JTextField jSearch1;
    private javax.swing.JButton jSkripsi;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel panelAtas;
    private javax.swing.JPanel panelKiri;
    private javax.swing.JPanel panelPinjamSkripsi;
    private javax.swing.JPanel panelTengah;
    private javax.swing.JButton print;
    private javax.swing.JButton search;
    private javax.swing.JButton simpan;
    private javax.swing.JButton theMost;
    // End of variables declaration//GEN-END:variables
}
